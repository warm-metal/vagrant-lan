# -*- mode: ruby -*-
# vi: set ft=ruby :
CLUSTER_NAME = "vm"
NUM_VMS = 1
NUM_CPU_CORES = 2
CAP_MEMORY = 4096
BASE_BOX = "ubuntu/bionic64"

# DO NOT modify unless being necessary
VM_LAN = "vboxnet0"
VM_LAN_IP_PREFIX = "10.38."
# Currently only a 16bit mask is supported.
VM_LAN_MASK = "255.255.0.0"
VM_LAN_IP = "#{VM_LAN_IP_PREFIX}0.1"
VM_LAN_GATEWAY_IP = "#{VM_LAN_IP_PREFIX}0.2"
GATEWAY_MACHINE = "#{VM_LAN}-gateway"
ROOT_RSA = "~/.ssh/id_rsa"
LAN_DOMAIN_SUFFIX = "env.lab.local"

VMGROUP = "/" + CLUSTER_NAME
DOMAIN_SUFFIX = "." + CLUSTER_NAME + "." + LAN_DOMAIN_SUFFIX

def is_gateway_running?
  vmstat = `VBoxManage showvminfo #{GATEWAY_MACHINE} --machinereadable | grep VMState=`
  raise "Please install the lan gateway" if !$?.success?
  vmstat.strip!
  return vmstat == 'VMState="running"' || vmstat == 'VMState="starting"'
end

Vagrant.configure("2") do |config|
  config.vbguest.auto_update = false if Vagrant.has_plugin?('vagrant-vbguest')

  config.trigger.after :halt, :destroy do |t|
    t.info = "Stopping gateway"
    t.ruby do |env, m|
      runningVM = `vagrant global-status | grep virtualbox | grep running | awk '{ print $2 }'`
      runningVM.strip!
      if runningVM == "" || runningVM == GATEWAY_MACHINE
        `VBoxManage controlvm #{GATEWAY_MACHINE} acpipowerbutton`
        next
      end

      if runningVM.match(/#{CLUSTER_NAME}-m\d+/)
        puts "There are our guests still running"
        next
      end
      
      puts "Try to prune the vagrant status."
      `vagrant global-status --prune`
      runningVM = `vagrant global-status | grep virtualbox | grep running | awk '{ print $2 }'`
      runningVM.strip!
      if runningVM == "" || runningVM == GATEWAY_MACHINE
        `VBoxManage controlvm #{GATEWAY_MACHINE} acpipowerbutton`
      else
        puts "VM #{runningVM} are still running."
      end
    end
  end

  config.trigger.after :destroy do |t|
    t.info = "Removing group"
    t.ruby do |env, m|
      machineRoot = `VBoxManage list systemproperties | grep 'Default machine folder:' | awk -F: '{ print $2 }'`
      machineRoot.strip!
      raise "not machine root found" if machineRoot.empty?
      group = File.join(machineRoot, CLUSTER_NAME, CLUSTER_NAME+'-'+m.config.vm.hostname.delete_suffix(DOMAIN_SUFFIX))
      if File.directory?(group)
        FileUtils.rm_r(group)
        puts "#{group} deleted"
      end
    end
  end

  (1..NUM_VMS).each do |i|
    config.vm.define CLUSTER_NAME+"-m#{i}" do |master|
      master.vm.provider :virtualbox do |vbox|
        vbox.name = CLUSTER_NAME+"-m#{i}"
        vbox.memory = CAP_MEMORY
        vbox.cpus = NUM_CPU_CORES
        vbox.customize ["modifyvm", :id, "--groups", VMGROUP]
      end

      master.vm.hostname = "m#{i}" + DOMAIN_SUFFIX
      master.vm.box = BASE_BOX

      if ARGV[0] == "up" || ARGV[0] == "ssh"
        puts "fetching the LAN gateway machine #{GATEWAY_MACHINE}"
        if !is_gateway_running?
          puts "starting gateway #{GATEWAY_MACHINE}"
          `VBoxManage startvm #{GATEWAY_MACHINE} --type headless`
        end

        puts "fetching address of #{master.vm.hostname}"
        r = Vagrant::Util::Subprocess.execute(
          'ssh', "-i", ROOT_RSA,
          '-o', 'StrictHostKeyChecking=no',
          "vagrant@#{VM_LAN_GATEWAY_IP}",
          "sudo /usr/local/bin/mac_ip_alloc.sh #{master.vm.hostname} #{VM_LAN_IP_PREFIX}",
          :notify => [:stdout, :stderr],)

        addr = r.stdout.split(/\s+/)
        raise r.stdout if addr.length != 2
        mac = addr[0]
        ip = addr[1]

        puts "got ip #{ip}, mac #{mac}"

        master.vm.network :private_network, :name => VM_LAN, :adapter => 1, :ip => ip, :netmask => VM_LAN_MASK, :mac => mac, auto_config: false
        master.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", disabled: true
        master.ssh.port = 22
        master.ssh.host = ip
      end

      master.vm.provision :shell, inline: "hostnamectl set-hostname " + master.vm.hostname
      master.vm.provision :shell, inline: "touch /etc/cloud/cloud-init.disabled"
      master.vm.provision :shell, inline: "systemctl disable systemd-resolved.service apt-daily.timer apt-daily-upgrade.timer apt-daily.service apt-daily-upgrade.service"
      master.vm.provision :shell, inline: "systemctl stop systemd-resolved.service apt-daily.timer apt-daily-upgrade.timer apt-daily.service apt-daily-upgrade.service"
      master.vm.provision :shell, inline: "rm -f /etc/resolv.conf"
      master.vm.provision :shell, inline: "echo 'nameserver #{VM_LAN_GATEWAY_IP}' > /etc/resolv.conf"
    end
  end
end
